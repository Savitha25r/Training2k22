Remote Procedure Calls RPC
Remoting
Web Services
Windows Communication Framework
Web API s

Book called Elements of Reusable Object-Oriented Software, authored by 4 people anf famously known as Gang of Four

SW Engg. Principles:

1. Seperation of Concerns
2. Modularization
3. Abstractions-(what id does is needed) and not (how it does)
4. Anticipation of Changes :
     - Generality (non-coupled)
     - Incremental Development
     - Consistency of look and feel
5. DRY : Do Not Repeat Yourself
6. KISS : Keep it Simple Stupid
7. YAGNI : You Aren't Gonna Need It (Avoid Features that are not required)
8. SOLID : Are design Principals

S : Single Responsibility Principle (SRP)
   Every class or a structure in the code should have only one job to do and relate to single purpose

O : Open Close Principle (OSP)
   A s/w Module or a class is open for extension, but closed for modification

L : Liskov Subsitution principle (LSP)
   Is an extension to OSP, where derived classes extend the base class without changing the behaviour (usage of Interface methods)

I : Interface Seggregation principle (ISP)
   Clients should not be forced to implement interfaces that they do not use. Instead of one Fat Interface,small interfaces are prefered, based on set of methods, each one serving one purpose

D : Dependency Inversion principle (DIP)
   States that high level modules/classes should not depend on low levl classes/modules. Both should depend on abstraction. (layered arch)

DIP : Design Principle. Suggests a solution to the dependency problems, but does not say how or the techniques to use

Inversion of Control (Ioc) : is the actual mechanism that allows high level components to depend on abstraction rather than the low level (concrete implementation classes)

" Inversion of Control" is a principal, and Dependency Injection is Implementation

Dependency Injection (DI) : is the design pattern to inject concrete implementation of low level component into a high level component

Ioc Container : Is a programming framework that provides automatic DI of the components. Is responsible for
1. Registration of a specific dependency type.
2. Resolution : creating a dependency object and injecting into the actual requesting class
3. Disposition : Managing the lifetime of the dependencies

We can use the Unity Framework IIoc container)provided by Microsoft to achieve DI

DI can be used as below:
1. Constructor Injection : Instance of dependency can be passed as an argument to the constructor of the dependant class

2. Method Injection : An Instance of the dependency is passed as argument to the method of the dependant class

3. Property Injection : An instance of the dependency is injected to a specific property of the dependant class


Design Patterns are broadly classified as
  1. Creational Patterns : 
  2. Structural Patterns
  3. Behavioural Patterns


1. Factory Pattern : A factory is an object that creates other objects. Is a class with a method, which creates different types of objects based on the input


