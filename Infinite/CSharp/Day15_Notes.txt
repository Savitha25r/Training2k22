Extensions : Are adding new functions to the existing class/interface/structure etc, without modifing the source code of the original type. The need for extension methods are

1. We will not have the source code of the class/interface/structure etc
2. We will not have permissions to modify the original (sealed class)

So we create extension methods to add new methods in the existing class/structure 

Steps: Let us say, we have a class called FirstClass with 2 Methods say Method1(), and Method2() in a file called FirstClass.cs

Now we want to add 2 more methods called Method3() and Method4(string str) with their signatures
 So create another class called SecondClass inside a SecondClass.cs file

Now we want to add the above 2 methods to the first class. For that, we need to bind the methods with the first class using an object of the first class

Eg:

public static class{
 
 public Static void Method3(this FirstClass fc) 
  {   
    cw("Method 3");
  }

}

// the fc here is a binding parameter. It does not take any value when calling the exiension method. Is used only to bind.
// It should always be the first parameter and not anywhere else
// The class where we have declared extension methods have to have a static modifier.

//Point to Note : 1. Though the method is declared static, but when they are bound with other class, they convert into non-static methods, hence we are able to access them with an object 

2. Extension methods cannot be overridden (means you cannot create the same method with arguments as that of the original class method. Even if we attempt, then only the original method will be called and not the extension method.

3. Multiple binding parameters are not allowed in a method, but normal parameters can be one or more





//with the concept of aggregation/composition
            //before making it an extension

            // SubtractClass sc = new SubtractClass();
            // Console.WriteLine(sc.SubtractNum(10, 5));


            // using static class methods in the usual way 

            //Console.WriteLine(SubtractClass.MultiplyNum(2,3));
            //  Console.WriteLine(SubtractClass.SubtractNum(8,4));



Remoting: Is a mechanism for communicating between objects of various application which are not in the same process. The applications can be in the same computer or different computer. They can be in the same network or different network

Microsoft .Net Remoting provides a framework that allows communication between remote objects

- Remoting is designed to hide most aspects like managing connections, marshalling data, reading, writing xml and SOAP. The framework also provides services like object activation, life time support of objects, communication channels,trnsport messages from one remote application to others.

Types of Remotable Objects

1. Single Call:  Objects that serve only one request
2. Singleton : Objects that serve multiple clients. The server maintains the state of each client request
3. Client Activated Objects(CAO) : Upon request from client to access the remote application, the instance of the requested object is activated and the reference of the object is sent back to the client. A proxy is created on the client side using the Object reference. The clients request calls will then be executed on the proxy


Domain : When an application is loaded in the memory, a process is created and within that process an application domain is created

Contexts : An application domain is divided into various contexts. A context is a set of common constraints, usage, access, functionalities within the object. A domain acts as a boundary. Requests across context will be marshalled

Proxies: A proxy is an instance of the Remote Object directly available to the client. It does all the required marshalling across contexts and then forwards the request to the actual remote object. Are of 2 types, 1. Transparent Proxy 
(interacts with the client)and 2. Real proxy (Responsible for actual method calls and response messages)

Marshaling : Specifies how a remote object is exposed to a client application. Marhsl by value, marshal by ref are 2 types of marshaling techniques

Channel : A mechanism that allows a stream of bytes to be sent from client to server (vice versa)
 Eg : HttpChannel and TcpChannel

Serialization : A Process of conversion of an object to stream of bytes.


2 tier architecture  (Client and Server) 
3 tier architecture  (client-uI, Middlelayer (Business Logic), Data Layer (actual data)
n tier architecture : Milti layered 




